Lang {
  Program         = FunctionDeclaration* Expression
  FunctionDeclaration = "func" identifier "(" Parameters ")" ExpressionSequence "end"
  Parameters      = ListOf<identifier, ",">
  ExpressionSequence = NonemptyListOf<Expression, ";">

  Expression      = Conditional
                  | Additive
  Conditional     = Additive "if" Comparison "else" Additive
  Comparison      = Additive (CompOp Additive)*
  Additive        = Multiplicative (AddOp Multiplicative)*
  Multiplicative  = Unary (MulOp Unary)*
  Unary           = Negation | Factorial | Primary
  Negation        = "-" Primary
  Factorial       = Primary "!"
  Primary         = NumericLiteral
                  | StringLiteral
                  | FunctionCall
                  | identifier
                  | ParenExpr
  ParenExpr       = "(" Expression ")"
  FunctionCall    = identifier "[" ListOf<Expression, ","> "]"

  AddOp           = "+" | "-"
  MulOp           = "*" | "/"
  CompOp          = "=="

  NumericLiteral  = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  StringLiteral   = "\"" (escapeSequence | ~"\"" any)* "\""
  escapeSequence  = "\\" ("\"" | "\\" | "n" | "'" | unicode)
  identifier      = letter (letter | digit | "_" | "@" | "$")*

  // Lexical rules
  unicode = "u{" hexDigit+ "}"
  comment = "--" (~"\n" any)*
}